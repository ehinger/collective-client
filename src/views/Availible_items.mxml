<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mq="com.mapquest.tilemap.*"
		xmlns:mapquest="com.mapquest.*"
		xmlns:overlays="com.mapquest.tilemap.overlays.*"
		creationComplete="onCC()"
		actionBarVisible="false" tabBarVisible="false" title="Availible_items">

	
	<s:states>
		<s:State name="State1"/>
		<s:State name="map"/>
		<s:State name="add"/>
		<s:State name="details"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.mapquest.*;
			import com.mapquest.tilemap.*;
			import com.mapquest.tilemap.controls.inputdevice.*;
			import com.mapquest.tilemap.controls.shadymeadow.*;
			import com.mapquest.tilemap.overlays.ImageOverlay;
			import com.mapquest.tilemap.pois.*;
			
			import connectivity.*;
			
			import flash.events.MouseEvent;
			import flash.filters.DropShadowFilter;
			import flash.sampler.NewObjectSample;
			import flash.sensors.Geolocation;
			
			import mx.controls.*;
			import mx.events.FlexEvent;
			
			import spark.events.ViewNavigatorEvent;
			import spark.primitives.Rect;
			
			private var myPoi:Poi;
			private var r:LatLng = new LatLng();
			
			protected var imi:ImageMapIcon = new ImageMapIcon();
			
			[Bindable]private var strInfo:String = " ";
			
			protected var base:Image;
			protected var button:Image;
			protected var itemTitle:Label;
			protected var value:Label;
			protected var group:Group;
			protected var source1:String;
			protected var buttonSrc:String;
			protected var type1:String;
			protected var description:Label;
			protected var geo:Geolocation = new Geolocation();
			protected var center:LatLng;
			protected var name1:Label;
			
			protected function onCC():void {
				ServerAccess.getResources(ServerAccess.getUserId(), storedItems);
			}
			
			protected function storedItems(response:Response):void {
				if (response.isSuccess()) 
				{
					// Do successful operation stuffs.  use response.data to access returned data.
					trace('success!  ' + response.getData());
					
					for each (var resource:Object in response.getData()) 
					{
						this.base = new Image;
						this.group = new Group;
						this.button = new Image;
						this.itemTitle = new Label;
						this.value = new Label;
						this.name1 = new Label;
						
						itemTitle.text=resource.title;
						itemTitle.y=7;
						itemTitle.x=80;
						value.text=resource.points + " pts";
						value.y=7;
						value.x=275;
						button.width=85;
						button.height=50;
						//name.text=resource.
						button.x=235;
						button.y=28;
						button.addEventListener(MouseEvent.CLICK, detailButton);
						if (resource.type == "tools"){
							base.source="assets/itemtools.png";
							button.source="assets/itembutton.png";
							base.width=320;
							base.height=80;
							base.x=-1;
							base.y=-1;
						}
						else if (resource.type == "land"){
							base.source="assets/itemland.png";
							button.source="assets/itembutton4.png";
							base.width=320;
							base.height=80;
							base.x=-1;
							base.y=-1;
						}
						else if (resource.type == "services"){
							base.source="assets/itemservices.png";
							button.source="assets/itembutton2.png";
							base.width=320;
							base.height=80;
							base.x=-1;
							base.y=-1;
						}
						else if (resource.type == "plants"){
							base.source="assets/itemplants.png";
							button.source="assets/itembutton3.png";
							base.width=320;
							base.height=80;
							base.x=-1;
							base.y=-1;
						}
						group.addElement(base);
						group.addElement(button);
						group.addElement(itemTitle);
						group.addElement(value);
						wrapper.addElement(group);
					}
					
				}		
				else
				{
					trace('failed: ' + response.getData());
				}
			}
			
			private function onMapClick(e:MouseEvent):void {
				//reset the info string
				strInfo = "\n\n";
				strInfo += "" + this.map1.pixToLL(new Point(this.map1.mouseX,this.map1.mouseY)).toString();
				r = map1.tileMap.pixToLL(new Point(this.map1.mouseX,this.map1.mouseY));
				this.imi.setImageURL("assets/cir.png", height = 15, width = 15);
				this.myPoi = new Poi(r, imi);
				this.map1.addShape(this.myPoi);
			}
			
			protected function image1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				navigator.replaceView(map);
			}
			
			protected function image2_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				navigator.replaceView(user);
			}
			
			protected function image3_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				navigator.replaceView(trades);
			}
			
			protected function image4_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub			
				this.setCurrentState("State1");
			}
			
			
			protected function image5_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				this.setCurrentState("State1");
				this.group = new Group;
				this.base = new Image;
				this.button = new Image;
				this.itemTitle = new Label;
				this.value = new Label;
				this.description = new Label;
				itemTitle.text=itemName.text;
				itemTitle.y=7;
				itemTitle.x=80;
				description.text=itemDescription.text;
				value.text=itemValue.value + " pts";
				value.y=7;
				value.x=275;
				button.source=buttonSrc;
				button.x=235;
				button.y=28;
				button.width=85;
				button.height=50;
				button.addEventListener(MouseEvent.CLICK, detailButton);
				base.y=0;
				base.source=source1;
				base.width=320;
				base.height=80;
				group.addElement(base);
				group.addElement(button);
				group.addElement(itemTitle);
				group.addElement(value);
				wrapper.addElement(group);
				ServerAccess.addResource(type1, r.lat, r.lng, itemName.text, itemDescription.text, itemValue.value, onResourceAdded);
			}
			
			protected function onResourceAdded(response:Response):void {
				if (response.isSuccess()) 
				{
					// Do successful operation stuffs.  use response.data to access returned data.
					trace('success!  ' + response.getData());
					
				}		
				else
				{
					trace('failed: ' + response.getData());
				}
			}
			
			protected function detailButton(event:MouseEvent):void {
				this.setCurrentState("add");
				//ServerAccess.getResource(
			}
			
			protected function tools_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				tools.selected=true;
				land.selected=false;
				plants.selected=false;
				time.selected=false;
				buttonSrc="assets/itembutton.png";
				source1="assets/itemtools.png";
				type1="tools";
			}
			
			protected function land_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				land.selected=true;
				tools.selected=false;
				plants.selected=false;
				time.selected=false;
				buttonSrc="assets/itembutton4.png";
				source1="assets/itemland.png";
				type1="land";
			}
			
			protected function plants_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				plants.selected=true;
				tools.selected=false;
				land.selected=false;
				time.selected=false;
				buttonSrc="assets/itembutton2.png";
				source1="assets/itemservices.png";
				type1="services";
			}
			
			protected function time_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				time.selected=true;
				tools.selected=false;
				land.selected=false;
				plants.selected=false;
				buttonSrc="assets/itembutton3.png";
				source1="assets/itemplants.png";
				type1="plants";
			}
			
			protected function image6_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				this.setCurrentState("details");
				itemName.text="";
				itemDescription.text="";
				tools.selected=false;
				land.selected=false;
				plants.selected=false;
				time.selected=false;
			}
			
			protected function next_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				this.setCurrentState("map");
				if (Geolocation.isSupported) {
					geo.addEventListener(GeolocationEvent.UPDATE, onUpdate);
					this.addEventListener(ViewNavigatorEvent.REMOVING, onRemoval);
					this.map1.setCenter(center);
				}
				else {
					this.map1.setCenter(new LatLng(-41.295399, 174.7756));
				}
				this.map1.addEventListener(MouseEvent.CLICK,onMapClick);
			}
			
			protected function onUpdate(event:GeolocationEvent):void {
				this.center = new LatLng;
				center.lat = event.latitude;
				center.lng = event.longitude;
			}
			
			protected function onRemoval(event:ViewNavigatorEvent):void
			{
				geo.removeEventListener(GeolocationEvent.UPDATE, onUpdate);                
			}
			
			protected function cancel_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				this.setCurrentState("State1");
				
				this.addElement(bar);

			}
			
		]]>
	</fx:Script>
	
	<s:Image includeIn="State1,add,details" x="0" y="-240" width="320" source="assets/bg.png"
			 x.details="0" y.details="-260"/>
	
	<s:Group id="bar">
		<s:Image x="-1" y="-4" width="321" height="90" source="assets/Untitled-2.jpg"/>
		<s:Image x="1" y="0" width="77" height="76" click="image1_clickHandler(event)"
				 source="assets/Untitled-2.png" smooth="true"/>
		<s:Image x="80" y="0" width="74" height="76" click="image2_clickHandler(event)"
				 source="assets/Untitled-23.png" smooth="true"/>
		<s:Image x="155" y="-2" width="75" height="74" click="image3_clickHandler(event)"
				 source="assets/Untitled-24.png" smooth="true"/>
		<s:Image x="239" y="-2" width="68" height="77" click="image4_clickHandler(event)"
				 source="assets/Untitled-25.png" smooth="true"/>
	</s:Group>
	
	<s:Scroller x="0" y="80" width="320" height="345" includeIn="State1">
		<s:VGroup id="wrapper" gap="0">
		</s:VGroup>
	</s:Scroller>


		

	
	<mq:TilemapComponent id="map1" includeIn="map" x="-1" y="-1" key="Fmjtd%7Cluub2g62l1%2C7s%3Do5-9ualu6" zoom="15" width="320" height="480"/>
	
	<s:Image includeIn="map" x="-2" y="317" width="322" source="assets/mapcoord.png"/>
	<s:Label id="lblInfo" includeIn="map" x="5" y="362" width="310" height="45"
			 color="#4C3319" fontSize="10" text="{this.strInfo}" textAlign="center"/>
	<s:Image includeIn="map" x="-4" y="387" width="325" source="assets/mapcoord1.png" click="image5_clickHandler(event)"/>
	<s:CheckBox id="tools" includeIn="details" x="21" y="145" click="tools_clickHandler(event)"/>
	<s:CheckBox id="land" includeIn="details" x="100" y="145" click="land_clickHandler(event)"/>
	<s:CheckBox id="plants" includeIn="details" x="180" y="145" click="plants_clickHandler(event)"/>
	<s:CheckBox id="time" includeIn="details" x="262" y="146" click="time_clickHandler(event)"/>
	<s:Image includeIn="State1" x="-1" y="405" width="322" source="assets/new.png" click="image6_clickHandler(event)"/>
	<s:TextInput id="itemName" includeIn="details" x="19" y="91" width="273" prompt="Title"/>
	<s:TextInput id="itemDescription" includeIn="details" x="20" y="295" width="268" height="87"
				 enabled="true" fontWeight="normal" prompt="Description" textAlign="left"/>
	<s:HSlider id="itemValue" includeIn="details" x="17" y="227" width="281" maximum="5" minimum="1"
			   value="1"/>
	<s:Image id="next" includeIn="details" x="21" y="375" width="100" smooth="true"
			 source="assets/b1.png" click="next_clickHandler(event)"/>
	<s:Image id="cancel" includeIn="details" x="188" y="375" width="100" smooth="true"
			 source="assets/b2.png" click="cancel_clickHandler(event)"/>
	<s:Image includeIn="details" x="19" y="185" width="42" height="23" source="assets/addtools.png"/>
	<s:Image includeIn="details" x="168" y="187" width="55" height="20"
			 source="assets/addservices.png"/>
	<s:Image includeIn="details" x="96" y="187" width="41" height="19" source="assets/addland.png"/>
	<s:Image includeIn="details" x="251" y="187" width="43" height="20" source="assets/addplants.png"/>
	<s:Image includeIn="details" x="116" y="252" width="74" height="28" source="assets/addpoints.png"/>
	


	
</s:View>
